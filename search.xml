<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CTF中的代码审计]]></title>
    <url>%2F2019%2F06%2F16%2FCTF%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[代码审计总是看不懂，决定从Bugku中的代码审计题入手 extract变量覆盖题目连接 http://123.206.87.240:9009/1.php题目描述12345678910111213141516&lt;?php$flag='xxx';extract($_GET);if(isset($shiyan))&#123;$content=trim(file_get_contents($flag));if($shiyan==$content)&#123;echo'flag&#123;xxx&#125;';&#125;else&#123;echo'Oh.no';&#125;&#125;?&gt; 解法看到了一句话感觉说的很对：代码审计，最重要的就是看变量，关注这个变量的处理过程那么这道题关键的变量就是 $shiyan 和 $flag ，二者相等，即得flag extract() 函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。 题目使用了extract($_GET)接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值。如果新的变量和已有变量重名，会将已有变量替换。所以可以使用GET提交参数和值，利用extract()对变量进行覆盖，从而满足各个条件。 所以GET请求 ?flag=&amp;shiyan=extract()函数会将 $flag 和 $shiyan 的值覆盖了，将变量的值设置为空或者不存在的文件，就满足 $shiyan==$content Payload： http://123.206.87.240:9009/1.php?flag=&amp;shiyan= strcmp比较字符串题目链接 http://123.206.87.240:9009/6.php题目描述12345678910&lt;?php$flag = "flag&#123;xxxxx&#125;";if (isset($_GET['a'])) &#123;if (strcmp($_GET['a'], $flag) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。//比较两个字符串（区分大小写）die('Flag: '.$flag);elseprint 'No';&#125;?&gt; 解法]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF中的文件包含]]></title>
    <url>%2F2019%2F05%2F31%2FCTF%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%2F</url>
    <content type="text"><![CDATA[文件包含在CTF的WEB题中非常常见。由于对这方面知识较为欠缺，特意学习了一下 一道简单的题目首先，我们借助BUGKU的一道题来简单了解一下 题目名称：flag在index里题目链接：http://123.206.87.240:8005/post/ 解题过程打开链接点击一下http://123.206.87.240:8005/post/index.php?file=show.php发现有一个 file 参数，我们发现这个参数可以包含.php文件，再根据题目名称，flag在index.php里所以我们就可以用php协议来获取index.php的源码 file传值为php://filter/read=convert.base64-encode/resource=index.php 结果为一串Base64，解一下就能得到flag了 简要分析那我们该如何理解上述代码呢？ 简而言之，他的意思就是 以Base64的形式读取index.php的内容 我们首先要读取一个文件，就要使用php://filter/read=，然后目标是index.php，resource=index.php，这样进行读取，但是又因为是php文件，如果直接访问就会运行，所以使用base64读取，就会返回编码，无法执行。 内容补充· 关于php://filter协议：这种协议在存在文件包含漏洞时使用，当我们读取php文件时，在页面中无法显示，所以我们将php文件以特定的编码输出，之后再解码，就能得到php源文件了。· 在这个文件包含的点使用 php 协议就可以读取任何文件源码，类似地还有 data 协议，file 协议。WEB协议还有很多，应用也很广泛。 题目二题目名称：本地包含题目链接：http://123.206.87.240:8003/（链接已挂）123456&lt;?php include "flag.php"; $a = @$_REQUEST['hello']; eval( "var_dump($a);"); show_source(__FILE__); ?&gt; 解题过程?hello=);print_r(file(&quot;./flag.php&quot;));//如何理解Payload呢？我们将代码结合起来1eval( "var_dump();print_r(file("./flag.php"));//);"); 在eval函数中，””内部的为代码，//只在代码中起作用，相当于只注释了); 所以代码为1eval( "var_dump();print_r(file("./flag.php"));");]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>文件包含</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS学习及某XSS挑战赛的笔记]]></title>
    <url>%2F2019%2F05%2F29%2FXSS%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%9F%90XSS%E6%8C%91%E6%88%98%E8%B5%9B%E7%9A%84%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[PHP-判断变量是否为空的四种姿势]]></title>
    <url>%2F2019%2F05%2F28%2FPHP-%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[在做CTF中一些PHP代码审计题目时，常常会遇到判断变量是否为空的情况。根据CSDN上的一篇文章学习了一下 四种函数· if(isset($test)) true：变量已被赋值/设置· if(!empty($test)) true：变量不为空· if(!is_null($test)) true：变量不为空· if($test) true：以自身为参数，变量不为空为了方便起见，empty与is_null均取反值，使这四个函数都为ture时，变量不为空 ① isset()、!empty()会首先检查变量是否存在（存在返回true），然后再对变量值进行检测； is_null()、以自身为参数，直接检查变量值是否为null，如果变量未定义会出现错误警告。 ② isset()、!empty()的输入参数必须是一个变量（$变量），因为它们是语言结构，不是函数，无法被变量函数调用； is_null()、以自身为参数，输入参数只要是能够有返回值的就可以（常量、变量、表达式等都可以）； ③判断为空的时刻： Ⅰ isset()：仅当 未定义 或者 值为null 时，返回false； Ⅱ !empty()：未定义、 NULL、 “”(空字符)、0、“0”、FALSE、array()，均返回false; Ⅲ !is_null()：直接判断是否不为null，只有为null才返回false；未定义会出现错误警告； Ⅳ 以自身为参数：未定义、 NULL、 “”(空字符)、0、“0”、FALSE、array()，均返回false；变量未定义时出现错误警告； 测试（具体实验过程请参考原文）从上表可知： ① 对于值为null和未定义的变量，四种方式都能返回false 其中，!is_null()和“以自身为参数”对于未定义的变量还会出现Notice直接报错；② !empty()和“以自身为参数” 还会对“”、array()、0、“0”、false，均返回false；③ 而isset()和!is_null()只对null和未定义变量做出false判断； 注意isset()、!empty()的输入参数必须是一个变量1234$test=100;echo isset($test),'&lt;br/&gt;';echo !empty($test),'&lt;br/&gt;';echo !is_null($test),!is_null(100),!is_null($test=100),'&lt;br/&gt;'; 只有!is_null()，可以直接写!is_null(100),!is_null($b=100)； 而isset()和!empty()这样写会报错，输入参数只能写入一个变量（$变量） 因为isset()和!empty()是语言结构，is_null()是一个函数； 附参考文章]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>笔记</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ISCC2019-Misc]]></title>
    <url>%2F2019%2F05%2F27%2FISCC2019-%E6%9D%82%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[比赛不难，但是也想简单整理一下 隐藏的信息打开后如下： 0126 062 0126 0163 0142 0103 0102 0153 0142 062 065 0154 0111 0121 0157 0113 0111 0105 0132 0163 0131 0127 0143 066 0111 0105 0154 0124 0121 060 0116 067 0124 0152 0102 0146 0115 0107 065 0154 0130 062 0116 0150 0142 0154 071 0172 0144 0104 0102 0167 0130 063 0153 0167 0144 0130 060 0113 发现出现的数字都不大于8，猜测是8进制，随后转二进制，再转字符串，随后Base64解一下即可。 贴上一大佬的脚本 八进制转ASCll，ascll算出来拿去base64解码123456789101112131415#!-*-coding:utf-8 -*-import binasciifile_path='message.txt' strs=[]with open(file_path) as file_object:# print file_objectfor line in file_object:strs.append(line.rstrip())#print strsa=[]for i in strs:#a.append(binascii.a2b_hex(hex(int(i,8))[2:]))print binascii.a2b_hex(hex(int(i,8))[2:])s='V2VsbCBkb25lIQoKIEZsYWc6IElTQ0N7TjBfMG5lX2Nhbl9zdDBwX3kwdX0K'import base64print base64.b64decode(s) 最危险的地方就是最安全的地方 是个无法打开的jpg，直接foremost，分理出一大堆png文件和一个zip压缩包。png文件都是二维码，扫了一下发现没有什么有意义的内容 zip解压后又是一堆二维码，其中一个是jpg文件，查看备注信息得到一段base64，解一下即可。 解密成绩单这题是社团逆向大佬给我的提示，要用到一个工具，名为ILSpy下载下来的压缩包涉及到伪加密，直接用脚本把伪加密去掉随后用ILSpy打开 .exe 文件一通翻阅，翻到了用户名和密码 Welcome打开后是一堆杂乱的文字1蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條戶囗 萇條蓅烺計劃 洮蓠朩暒戶囗 萇條 看着就头晕。不过还是能发现规律的。“蓅烺計劃 洮蓠朩暒”是一组，“戶囗 萇條”是一组，都是成组出现的。所以把前者替换为0，后者替换为1，得到011001100110110001100001011001110111101101001001010100110100001101000011010111110101011101000101010011000100001101001111010011010100010101111101 二进制转字符串，得到flag 倒立屋一个png，用stegsolve打开，发现这个IsCc_2019倒过来就行了！我的天，这个脑洞。。。（9102_cCsI） 无法运行的exe一个exe文件。无法打开用winhex打开（notepad也行）发现了这些1iVBORw0KGgAAAAANSUhEUgAAASkAAAEpAQAAAADn4ukvAAACAklEQVR4nO2aQY6bQBBF3wdLsGvvsoSb4JzM+GbmCLmBvcwOFpFAMvwsIJ5ZjsRkcEj3BlR6Un9apa+qLmQ+sC7JRyiIWMQiFrGIfRjrNK+yy0eJi0oYl1i+sbY9YJlt+0roDgBVcwTZttvNte0BGyXV0OXInC9VCyCpfAFt+8FCn04s2ftlm/4/WBcGSTrR5V+36Z6xw/xIDTSELpsSzt/L0I5goNtQ2w6w+XgHAVB034bUguJH/stzLNtO216w4HndGA5gne5H0iXWb6xtN9hFZejTUfKV0I8Jqpuyi3XvJ2FnNwpDaqhuz2CI2bsG4+kA9rVwjwyVW9IJ+7p0HPUrf8IrY8ytWTrhurqxWO6NzDZUt9mW4/Guw8bU0JSAxeVUtACO3rsWW7J38QT3sycUbfbQWxrH7F2HZZ6ARgoPWTWEHmvJ5421/dPY0rXhxHAvB2kyzf34M9ekjbXtBxtTS6pa0gnVFPcci3NsK1Zi+P1qM0+8qxwo2ui9q7HntCJ0SlimFQmcfdtc2x6wP9OKLjw0Jy3pBHA/bq5tD9gyrViGQdyPgyRoqui9n4llD0u+QvYA1xDbis/EhoPsGkJ3kLmcvmTTHWMsBYM9X+nMlw92nz5riVg5rMUGzSM2siFBvgJYql9B2z+NHQDC23986fKaPTDE+96IRSxiEfsb2G/jeCyvdHD3rQAAAABJRU5ErkJggg== base64解一下，以16进制的形式显示得到123456789101112131415161718192021222324252627282930313233343536373800 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F--------------------------------------------------------------------89 50 4E 47 0D 0A 1A 00 00 00 00 0D 49 48 44 5200 00 01 29 00 00 01 29 01 00 00 00 00 E7 E2 E92F 00 00 02 02 49 44 41 54 78 9C ED 9A 41 8E 9B40 10 45 DF 07 4B B0 6B EF B2 84 9B E0 9C CC F866 E6 08 B9 81 BD CC 0E 16 91 40 32 FC 2C 20 9E59 8E C4 64 70 48 F7 06 54 7A 52 7F 5A A5 AF AA2E 64 3E B0 2E C9 47 28 88 58 C4 22 16 B1 88 7D18 EB 34 AF B2 CB 47 89 8B 4A 18 97 58 BE B1 B63D 60 99 6D FB 4A E8 0E 00 55 73 04 D9 B6 DB CDB5 ED 01 1B 25 D5 D0 E5 C8 9C 2F 55 0B 20 A9 7C01 6D FB C1 42 9F 4E 2C D9 FB 65 9B FE 3F 58 1706 49 3A D1 E5 5F B7 E9 9E B1 C3 FC 48 0D 34 842E 9B 12 CE DF CB D0 8E 60 A0 DB 50 DB 0E B0 F978 07 01 50 74 DF 86 D4 82 E2 47 FE CB 73 2C DB4E DB 5E B0 E0 79 DD 18 0E 60 9D EE 47 D2 25 D66F AC 6D 37 D8 45 65 E8 D3 51 F2 95 D0 8F 09 AA9B B2 8B 75 EF 27 61 67 37 0A 43 6A A8 6E CF 6088 D9 BB 06 E3 E9 00 F6 B5 70 8F 0C 95 5B D2 09FB BA 74 1C F5 2B 7F C2 2B 63 CC AD 59 3A E1 BABA B1 58 EE 8D CC 36 54 B7 D9 96 E3 F1 AE C3 C6D4 D0 94 80 C5 E5 54 B4 00 8E DE BB 16 5B B2 77F1 04 F7 B3 27 14 6D F6 D0 5B 1A C7 EC 5D 87 659E 80 46 0A 0F 59 35 84 1E 6B C9 E7 8D B5 FD D3D8 D2 B5 E1 C4 70 2F 07 69 32 CD FD F8 33 D7 A48D B5 ED 07 1B 53 4B AA 5A D2 09 D5 14 F7 1C 8B73 6C 2B 56 62 F8 FD 6A 33 4F BC AB 1C 28 DA E8BD AB B1 E7 B4 22 74 4A 58 A6 15 09 9C 7D DB 5CDB 1E B0 3F D3 8A 2E 3C 34 27 2D E9 04 70 3F 6EAE 6D 0F D8 32 AD 58 86 41 DC 8F 83 24 68 AA E8BD 9F 89 65 0F 4B BE 42 F6 00 D7 10 DB 8A CF C486 83 EC 1A 42 77 90 B9 9C BE 64 D3 1D 63 2C 0583 3D 5F E9 CC 97 0F 76 9F 3E 6B 89 58 39 AC C506 CD 23 36 B2 21 41 BE 02 58 AA 5F 41 DB 3F 8D1D 00 C2 DB 7F 7C E9 F2 9A 3D 30 C4 FB DE 88 452C 62 11 FB 1B D8 6F E3 78 2C AF 74 70 F7 AD 0000 00 00 49 45 4E 44 AE 42 60 82 用winhex新建一个文件，把第一行 07对应的00 改为0A，就得到了一个png文件，二维码，扫描得flag High起来！下载下来是个文件头损坏的png，把文件头修复好，是一个二维码，扫描得到 中口由羊口中中大中中中井 当铺密码，解出 201902252228 随后把png foremost一下，得到一个压缩包，解压得到一个mp3文件。我先用了Audacity进行分析，没什么有用的信息，猜测是要用到 MP3Stego，并且刚才解出的201902252228就是密码。果然，得到了1&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#123;&amp;#80;&amp;#114;&amp;#69;&amp;#116;&amp;#84;&amp;#121;&amp;#95;&amp;#49;&amp;#83;&amp;#99;&amp;#67;&amp;#57;&amp;#48;&amp;#49;&amp;#50;&amp;#95;&amp;#103;&amp;#79;&amp;#48;&amp;#100;&amp;#125; 扔到浏览器地址栏，回车，得到flag 他们能在一起吗？下载下来是个二维码，扫一下， UEFTUyU3QjBLX0lfTDBWM19ZMHUlMjElN0Q= base64解一下PASS{0K_I_L0V3_Y0u!}我以为这就是flag，但提交总是报错。 又把这个二维码foremost一下，得到一个压缩包，正好用这个 0K_I_L0V3_Y0u! 作为密码。得到了flag ISCC{S0rrY_W3_4R3_Ju5T_Fr1END} 小明极为难受 Keyes’ secret这道题做的很崩溃，赛后参考别人的writeup才做出来当初想到了是键盘密码，但是一直解不出来，很头疼可以直接上脚本来做参考：https://nitesculucian.github.io/2018/09/30/dctf-2018-message/ 该题脚本：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455keyboard = [ [[" "], ["QWERTY", "ASDFGH", "ZXCVBN"]], [["A"], ["XCVBGRD", "GRDXCVB", "ZSEFVCX"]], [["B"], ["WSXCFD", "RFVBHG", "QAZXDS", "YHNMKJ"]], [["C"], ["REDCV", "EWSXC", "TRFVB"]], [["D"], ["EDCVGR", "WSXCFE", "YHNMKU"]], [["E"], ["EDCVRF", "WSXCDE", "TGBNHY"]], [["F"], ["REDCF", "TRFVG", "EWSXD"]], [["G"], ["REDCVG", "CVGRED", "CVRGED"]], [["H"], ["WSXDRFV", "EDCFTGB", "RFVGYHN"]], [["I"], ["WSX", "EDC", "RFV"]], [["J"], ["UJMN", "WSXZ", "RFVC"]], [["K"], ["EDCFBY", "WSXDVR", "QAZSCE"]], [["L"], ["WSXCV", "EDCVB", "RFVBN"]], [["M"], ["ZAQWDRTGB", "XSWEFTYHN", "XSWEFTYNH"]], [["N"], ["ZAQWDVFR", "XSWEFTGB", "XSWEFTBG"]], [["O"], ["QAZXCDEW", "WSXCVFRE", "RFVBNHYT", "TGBNMJUY"]], [["P"], ["MNBVCCDERTG", "NBVCXSWERF", "NBVCXSWEFR"]], [["Q"], ["QAZXCDEWV", "EDCVBGTRN", "RFVBNHYTM"]], [["R"], ["MNBVCDRTGHU", "MNBVCDRTGHU", "MNBVCDRTGHU"]], [["S"], ["YTRFVCX", "IUYHNBV", "IUYHNBV"]], [["T"], ["WERTYFV", "RTYUIHN", "RTYUIHN"]], [["U"], ["WSXCVFR", "EDCVBGT", "EDCVBGT"]], [["V"], ["EFVGY", "WDCFT", "WDCFT"]], [["W"], ["EFVGYWDCFT", "EFVGYWDCFT", "EFVGYWDCFT"]], [["X"], ["WDVTDZ", "RGNYGC", "RGNYGC"]], [["Y"], ["JMYI", "EFVT", "EFVT"]], [["Z"], ["QWERDCVB", "ERTGVBN", "ERTGVBN"]]]def nliqwerty_dec(buf): dec_buf = buf result = "" while len(dec_buf) &gt; 0: if dec_buf[:1] == '&#123;' or dec_buf[:1] == '&#125;' or dec_buf[:1] == '.' or dec_buf[:1] == ',': result += dec_buf[:1] dec_buf = dec_buf[1:] continue is_found = False for i in range(11, 2, -1): for count in range(0, 27): for j in keyboard[count][1]: if dec_buf[:i] == j: result += keyboard[count][0][0] dec_buf = dec_buf[i:] is_found = True break if is_found: break print(result)nliqwerty_dec("&#123;WSXIUYHNBVTRFVBTRFVBQWERTYQAZSCEWSXCDEEFVTYHNMKJTGBNMJUYGRDXCVBMNBVCDRTGHUWSXCFEQWERTYTRFVBWSXNBVCXSWERFRFVGYHNWSXCDEMNBVCDRTGHU&#125;") 运行 Aesop’s secret是一个gif文件，用notepad打开发现末尾有一段U2FsdGVkX19QwGkcgD0fTjZxgijRzQOGbCWALh4sRDec2w6xsY/ux53Vuj/AMZBDJ87qyZL5kAf1fmAH4Oe13Iu435bfRBuZgHpnRjTBn5+xsDHONiR3t0+Oa8yG/tOKJMNUauedvMyN4v4QKiFunw==于是base64解一下，发现并不是这样。这时，注意到了题目名称中开头的AES猜测时AES解密。于是用ISCC作为密码，解了两次，成功 碎纸机这题脑洞也非常大 一张普通的jpg文件，直接foremost，出来一个压缩包，解压，发现有10张一模一样的图片用winhex打开，发现这几张图片的尾部还是不一样的。 以第一张为例，将这些0和其他字符的混合部分复制下来，放到notepad里，标记所有的0调整一下窗口大小 出现了FL的模样，其他几张以此类推，就得到flag了 脑洞真的很大。]]></content>
      <categories>
        <category>CTF</category>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku - Web]]></title>
    <url>%2F2019%2F05%2F25%2FBugku%20-%20Web%2F</url>
    <content type="text"><![CDATA[Bugku的一些Web题一直没怎么整理，就统一在这篇文章中梳理一下吧。文章持续更新 login1(SKCTF)· SQL约束攻击打开后是一个登陆界面，需要先注册。当我以admin为用户名进行注册时，提示admin已存在。所以我将用户名换成了um0，成功注册并登录。但提示“不是管理员还想看flag？！” 提示告诉我们要用SQL约束攻击。遂了解了一下。 简单来说，约束攻击就是利用SQL执行字符串处理时，字符串末尾的空格会被删除“admin”等同于“admin ” 这在绝大多数情况下是成立的例如SELECT * FROM users WHERE username=&#39;admin &#39;;与查询用户名“admin”的结果是一致的。 所以我们可以注册一个名为”admin “的账户并进行登陆 成功拿到Flag！ 你从哪里来· BP的使用打开后显示“are you from google?”并没有什么有用的信息用BP抓包修改http referer头即可 md5 collision(NUPT_CTF)· md5碰撞打开题目链接，“please input a”根据题目名称 md5 collision，md5 碰撞 原理解释：PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。 所以找一个md5是oe开头的值，get方式传参过去 附0e开头的md5和原值：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e5093672134182067008420087635140e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020 由于最近忙于CET-6的复习，也在纠结于自己的未来，感觉水平并没有明显的提高。 大三近在眼前，无论是司法考试、考研，还是公务员考试，也都到了该准备的时候 究竟该如何抉择，没有人能给我一个完全正确的建议。最终还是要看自己如何选择。 可能过度思考是没有意义的，不如先着手去做。 能够深入某一件事情，可能是我现在最需要去做的 近期要做的就是好好复习英语，整理好博客，锻炼好身体 That’s all . 写于 2019/5/25 各种绕过· sha()函数比较绕过关键点;sha1()函数无法处理数组类型，将报错并返回false web8· 代码审计提示：txt????思路一： 想得到flag，要满足三个条件 · ac的值不为空 · f的值从文件fn中获得 · ac 恒等于 f Payload： ?ac=123&amp;fn=php://input [post] 123 思路二： 根据提示的txt，访问一下flag.txt，发现 $ac是指flag.txt中的内容flags，$fn指的是flag.txt这个文件 Payload：?ac=flags&amp;fn=flag.txt file_get_contents() 函数把整个文件读入一个字符串中。 细心· 御剑 robots.txt这道题打开后没有什么特别的发现用御剑扫了一下，扫到了robots.txt访问一下得到了这个resusl.php根据提示，GET一个x=admin 以上内容整理于2019/5/28 求getshell我随便找了一张图片传了上去上传成功，然并卵随后我上传了一个PHP文件，并用BP抓包想都不用想，肯定会报错的 这道题应用了walf严格匹配，对文件类型和后缀的检测在BP中需要修改content-type字段以及文件的后缀walf如果是严格匹配，那么大小写可能会让walf失效，然而服务器的容错率高所以服务器正常解析后缀名修改为php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名），发现只有php5没有被过滤 ##]]></content>
      <categories>
        <category>CTF</category>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写于北京“一带一路”安保前]]></title>
    <url>%2F2019%2F04%2F15%2F%E5%86%99%E4%BA%8E%E5%8C%97%E4%BA%AC%E2%80%9C%E4%B8%80%E5%B8%A6%E4%B8%80%E8%B7%AF%E2%80%9D%E5%AE%89%E4%BF%9D%E5%89%8D%2F</url>
    <content type="text"><![CDATA[前一阵子瞎忙了好久，各种各样的活动，大大小小的比赛。 今天终于忙里偷闲，写写东西。学习CTF也有半年左右了，由于自己的基础比较薄弱，加上这半年来有很多任务，导致我一直感觉自己的进步并不是很明显，还是一个啥都不会的小白。 现在看代码还是一脸懵，很多基础知识还是很欠缺。去北京安保的这段日子，如果有空闲时间，就好好补习一下吧 当初脑子一热，报名了今年上半年的软考，这几天被密码学折磨到吐血。5月底有软考，6月中旬有英语六级，6月底又是期末。 自己报名的考试，含着泪也要考完呐….]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello world]]></title>
    <url>%2F2019%2F03%2F17%2FHello-world%2F</url>
    <content type="text"><![CDATA[大家好！我是Um0 这是我的第一篇博客 这是一个新的起点所以我把这篇博客命名为“Hello World” 终于有了一个自己的小窝感到非常幸福也很有成就感希望大家多多支持 多多指教 ! Hello World ! 我的联系方式： QQ：297971447 E-mail: 297971447@qq.com]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
